# Label personalizzate che ereditano (@) appunto da Label
<BlackLabel@Label>:
    color: (0, 0, 0, 1)

<TitleLabel@Label>:
    canvas.before:
        Color: 
            rgba: (1, .5, 0, 1) # canvas arancione 
        # questa tela sarà di forma rettangolare ed avrà le stesse dimensioni e la stessa
        # posizione del BoxLayout genitore che lo contiene
        Rectangle: 
            size: self.size
            pos: self.pos
    color: (1, 1, 1, 1) # colore del titolo bianco

<MainWindow>:
    # Qui rendo praticamente visibili alla classe MainWindow associata (contenut nel modulo main.py)
    # nessuno/parte/gli id dei sotto oggetti compresi il bottone in basso
    # <nome da usare nella classe>: <id specificato qui nel file kv>
    submit_button: submit_button
    nome: nome
    cognome: cognome
    data_di_nascita: data_di_nascita
    luogo_di_nascita: luogo_di_nascita
    BoxLayout:
        id: main_box
        # il BoxLayout non ha di per sè uno sfondo quando creato: è sempicemente un contenitore
        # Dobbiamo quindi creare lo sfondo che si fa con l'attributo canvas.before (canvas = tela, 
        # before perché verrà creato prima di qualsiasi oggetto che il BoxLayout contiene)
        canvas.before:
            Color: 
                rgba: (1, 1, 1, 1) # canvas bianco  
            # questa tela sarà di forma rettangolare ed avrà le stesse dimensioni e la stessa
            # posizione del BoxLayout genitore che lo contiene
            Rectangle: 
                size: self.size
                pos: self.pos
        orientation: "vertical"
        BoxLayout:
            id: title
            # diciamo di occupare il 20% dello spazio in altezza
            # della finestra (altrimenti sarebbe del 33% visto che 
            # è il primo dei 3 boxlayout principali disposti verticalmente)
            size_hint_y: 0.20
            # Per fare una cosa più fica usiamo la label del titolo personalizzata
            TitleLabel:
            #Label:
                # in genere il rosso normalmente in RGB (Red, Green, Blue) sarebbe (255, 0, 0, 255) 
                # Nota: l'ultimo parametro indica l'opacità
                # In kivy invece per ognuno di questi 4 parametri va messo il vaore percentuale e quindi
                # un valore tra 0 e 1 compresi ottenuti dalla divisione per 255
                # Ci aggiungiamo mezza quantità di verde per ottenere arancione o intera
                # per ottenere il giallo
                #color: (1, .5, 0, 1)
                #
                font_size: 30
                bold: True
                text: "Form da compilare"
        BoxLayout:
            id: fields
            orientation: "vertical"
            BoxLayout:
                # Ovviamente le 4 righe delle coppie di campi (label + textinput)
                # si distribuiscono sempre equamente lo spazio verticale riservato al 
                # BoxLayout in cui sono definiti, anche se dovessimo impostare a tutti
                # lo stesso size_hint_y ad esempio .2 (20%)
                # Per questo non ci possiamo affidare al size_hint per risolvere il 
                # problema ma dobbiamo usare delle altezze fisse in pixel (E' importante
                # impostare a None il size_hint_y a tutti)
                # Siccome kivy "parte dal basso" (il punto (0,0) è quello in basso a sx)
                # anche le altezze partiranno dall'alto. Per questo motivo avremo
                # che questi 3 BoxLayout saranno sul fondo. Per ovviare a questo problema
                # possiamo usare l'escamotage di un quarto BoxLayout vuoto sotto l'ultimo
                # che andrà a riempire lo spazio restante della finestra tenendo presente
                # del 10% del BoxLayout del pulsante e del 20% del titolo
                size_hint_y: None
                height: 30 
                #Label:
                # Dopo aver impostato lo sfondo bianco, la Label che di default ha come
                # colore bianco, non si vedrebbe più. Andrebbe quindi impostato color nero
                # per ogni label presente nel form. Per evitare questa scocciatura, usiamo 
                # una label personalizzata (vedi definizione in alto) e non più Label
                BlackLabel:
                    text: "Nome"
                TextInput:
                    id: nome
                    multiline: False
            BoxLayout:
                size_hint_y: None
                height: 30 
                BlackLabel:
                    text: "Cognome"
                TextInput:
                    id: cognome
                    multiline: False
            BoxLayout:
                size_hint_y: None
                height: 30 
                BlackLabel:
                    text: "Data di nascita"
                TextInput:
                    id: data_di_nascita
                    multiline: False
            BoxLayout:
                size_hint_y: None
                height: 30 
                BlackLabel:
                    text: "Luogo di nascita"
                TextInput:
                    id: luogo_di_nascita
                    multiline: False
            BoxLayout:
        BoxLayout:
            id: button
            size_hint_y: .1
            # Per centrare il pulsante si può usare questo escamotage:
            # inserire prima e dopo due label vuote dal momento che se
            # non l'orientamento di default di un BoxLayout è orizzontale
            Label:
            Button:
                # per poter utilizzare questo button all'interno della classe MainWindow del modulo main.py
                # è necessario inserire un'associazione all'interno della definizione <MainWindow> in alto
                # che per semplicità può avere lo stesso id
                id: submit_button
                background_normal: "" # annullo il background quando il pulsante non è anora premuto
                background_color: (1, .5, 0, 1) # imposto il colore dello sfondo uguale a quello del titolo
                # annullo il background quando il pulsante viene premuto ma così facendo non si
                # vede più l'effetto visivo di quando il pulsante viene premuto
                background_down: "" 
                text: "Invia"
                on_press:
                    self.background_color = (1, 0, 0, .8)
                on_release:
                    self.background_color = (1, .5, 0, 1)
                    # richiamo il metodo che si trova nella classe root e cioè MainWindow
                    # che richiama il popup
                    root.conferma_invio_form() 
            Label:

<CustomPopup>:
    accettato_invio_form: accettato_invio_form

    BoxLayout:
        orientation: "vertical"
        Label:
            text: "Sei sicuro di voler inviare il form?"
        BoxLayout:
            Button:
                size_hint_y: None
                height: 50
                text: "Cancel"
                on_release:
                    root.dismiss_popup()
            Button:
                id: accettato_invio_form
                size_hint_y: None
                height: 50
                text: "Invia"
                on_release:
                    # qui chiamo il metodo che Kivy crea con lo stesso nome del 
                    # pulsante dopo l'associazione effettuata con la creazione
                    # del popup in main.py all'interno di MainWindow, precisamente
                    # nel metodo conferma_invio_form() quando passiamo il parametro
                    # accettato_invio_form=self.invia_form)
                    root.accettato_invio_form()
                    root.dismiss_popup()

<SecondWindow>:
    BoxLayout:
        canvas.before:
            Color: 
                rgba: (1, 1, 1, 1) # canvas bianco  
            # questa tela sarà di forma rettangolare ed avrà le stesse dimensioni e la stessa
            # posizione del BoxLayout genitore che lo contiene
            Rectangle: 
                size: self.size
                pos: self.pos
        orientation: "vertical"
        BlackLabel:
            text: "Grazie per aver compilato il form"
        Button:
            size_hint_y: None
            height: 50
            text: "indietro"
            on_release:
                root.go_back()